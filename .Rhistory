Name == 'Wii Sports' ~ 'Wii Sports',
Name != 'Wii Sports' ~ 'Average'
)) %>%
group_by(Name) %>%
summarise(NA_Sales = mean(NA_Sales),
EU_Sales = mean(EU_Sales),
JP_Sales = mean(JP_Sales),
Global_Sales = mean(Global_Sales),
Other_Sales = mean(Other_Sales)) %>%
slice(match(c('Wii Sports', 'Average'), Name))
something <- something %>%
pivot_longer(cols = c('NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales'),
names_to = c('Type'),
values_to = c('Sales'))
something$Name <- factor(something$Name, levels = c('Wii Sports', 'Average'))
ggplot(something, aes(Type, Sales, fill = Name)) +
geom_col(position = 'dodge')
runApp('Jung_Nathan_final_project.R')
library(tidyverse)
# Creating function to add a colors column to the data
coloring <- function(platform) {
if (platform %in% list("Wii", 'NES', 'GB', 'DS', 'SNES', 'GBA', '3DS', 'N64', 'GC', 'WiiU'))
{return('red')}
if (platform %in% list('X360', 'XB', 'XOne'))
{return('limegreen')}
if (platform %in% list('PS3', 'PS2', 'PS4', 'PS', 'PSP', 'PSV'))
{return('darkblue')}
if (platform %in% list('2600', 'GEN', 'GG', 'SCD', 'DC'))
{return('#0D98BA')}
else
{return('#71797E')}
}
vgsales$coloring <- apply(vgsales[c('Platform')], 1, FUN = coloring)
# Function to get "coloring" based off of a title
get_color <- function(title) {
row = vgsales %>%
filter(Name == title)
color = unique(row$coloring)
return(color[[1]])
}
# Getting list of all unique video game titles
vg_names <- unique(vgsales$Name)
# Defining function to filter based on platform
to_be_platform <- function(df, group) {
if (group != 'All Platforms')
filter(df, Platform == group)
else
df
}
# Defining function to filter based on year
to_be_year <- function(df, group) {
if (group == 'All Years')
df
else
filter(df, Year == group)
}
# Defining function to filter based on publisher
to_be_publisher <- function(df, group) {
if (group == 'All Publishers')
df
else
filter(df, Publisher == group)
}
# Defining function to filter based on genre
to_be_genre <- function(df, group) {
if (group == 'All Genres')
df
else
filter(df, Genre == group)
}
# Defining function to filter based on outliers
to_be_outliers <- function(df, outlier) {
if (outlier == 'Yes')
filter(df, Global_Sales <= 1.5*(quantile(Global_Sales, .75) - quantile(Global_Sales, .25)) + quantile(Global_Sales, .75))
else
df
}
something <- to_be_outliers(vgsales, 'Yes')
# Defining function to choose list of platforms based on input
platforms <- function(name) {
platform = filter(vgsales, Name == name)
unique(platform$Platform) %>%
append('All Platforms', 0)
}
# Defining function to filter based on outliers
to_be_outliers <- function(df, outlier) {
if (outlier == 'Yes')
filter(df, 'Global_Sales' <= 1.5*(quantile('Global_Sales', .75) - quantile('Global_Sales', .25)) + quantile('Global_Sales', .75))
else
df
}
to_be_outliers(vgsales, 'Global_Sales')
to_be_outliers(vgsales, 'Yes')
to_be_outliers(vgsales, 'Yes')
# Defining function to filter based on outliers
to_be_outliers <- function(df, outlier) {
if (outlier == 'Yes')
filter(df, Global_Sales <= 1.5*(quantile(Global_Sales, .75) - quantile(Global_Sales, .25)) + quantile(Global_Sales, .75))
else
df
}
to_be_outliers(vgsales, 'Yes')
# Defining function to filter based on outliers
to_be_outliers <- function(df, outlier) {
if (outlier == 'Yes')
filter(df, Global_Sales <= 1.5*(quantile(Global_Sales, .75) - quantile(Global_Sales, .25)) + quantile(Global_Sales, .75))
else
df
}
to_be_outliers(vgsales, 'Yes')
View(vgsales)
# Defining function to filter based on outliers
to_be_outliers <- function(df, outlier) {
if (outlier == 'Yes')
filter(df, Global_Sales <= 1.5*(quantile(Global_Sales, .75) - quantile(Global_Sales, .25)) + quantile(Global_Sales, .75))
else
df
}
to_be_outliers(vgsales, 'Yes')
View(to_be_genre)
runApp('Jung_Nathan_final_project.R')
install.packages(c("cli", "dplyr", "fansi", "lme4", "rlang", "tibble", "utf8", "vctrs"))
install.packages(c("cli", "dplyr", "fansi", "lme4", "rlang", "tibble", "utf8", "vctrs"))
install.packages("dplyr")
install.packages(c("cli", "dplyr", "fansi", "lme4", "rlang", "tibble", "utf8", "vctrs"))
install.packages('Rtools')
install.packages("shiny")
install.packages("shinydashboard")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("DT")
install.packages("knitr")
install.packages("kableExtra")
install.packages("rlang")
install.packages("rworldmap")
install.packages("cowplot")
# Loading in libraries
library(shiny)
library(shinydashboard)
library(ggplot2)
library(tidyverse)
library(DT)
library(knitr)
library(kableExtra)
library(rlang)
library(rworldmap)
library(cowplot)
# Loading in data
vgsales <- read.csv('data/vgsales.csv')
# Creating function to add a colors column to the data
coloring <- function(platform) {
if (platform %in% list("Wii", 'NES', 'GB', 'DS', 'SNES', 'GBA', '3DS', 'N64', 'GC', 'WiiU'))
{return('red')}
if (platform %in% list('X360', 'XB', 'XOne'))
{return('limegreen')}
if (platform %in% list('PS3', 'PS2', 'PS4', 'PS', 'PSP', 'PSV'))
{return('darkblue')}
if (platform %in% list('2600', 'GEN', 'GG', 'SCD', 'DC'))
{return('#0D98BA')}
else
{return('#71797E')}
}
vgsales$coloring <- apply(vgsales[c('Platform')], 1, FUN = coloring)
# Function to get "coloring" based off of a title
get_color <- function(title) {
row = vgsales %>%
filter(Name == title)
color = unique(row$coloring)
return(color[[1]])
}
# Getting list of all unique video game titles
vg_names <- unique(vgsales$Name)
# Defining function to filter based on platform
to_be_platform <- function(df, group) {
if (group != 'All Platforms')
filter(df, Platform == group)
else
df
}
# Defining function to filter based on year
to_be_year <- function(df, group) {
if (group == 'All Years')
df
else
filter(df, Year == group)
}
# Defining function to filter based on publisher
to_be_publisher <- function(df, group) {
if (group == 'All Publishers')
df
else
filter(df, Publisher == group)
}
# Defining function to filter based on genre
to_be_genre <- function(df, group) {
if (group == 'All Genres')
df
else
filter(df, Genre == group)
}
# Defining function to filter based on outliers
to_be_outliers <- function(df, outlier) {
if (outlier == 'Yes')
filter(df, Global_Sales <= 1.5*(quantile(Global_Sales, .75) - quantile(Global_Sales, .25)) + quantile(Global_Sales, .75))
else
df
}
to_be_outliers(vgsales, 'Yes')
something <- to_be_outliers(vgsales, 'Yes')
# Defining function to choose list of platforms based on input
platforms <- function(name) {
platform = filter(vgsales, Name == name)
unique(platform$Platform) %>%
append('All Platforms', 0)
}
# Defining function to choose a year based on input
years <- function(name) {
year = filter(vgsales, Name == name)
unique(year$Year) %>%
append('All Years', 0)
}
# Defining function to choose Publisher based on input
publishers <- function(name) {
publisher = filter(vgsales, Name == name)
unique(publisher$Publisher) %>%
append('All Publishers', 0)
}
# Defining function to choose genre based on input
genres <- function(name) {
genre = filter(vgsales, Name == name)
unique(genre$Genre) %>%
append('All Genres', 0)
}
# Creating list of all types of sales in vgsales
regions <- colnames(vgsales)[7:11]
# Creating list and df of ISO3 country names in EU, NA, JP, Other and Global
EUR <- c('AUT', 'BEL', 'BGR', 'HRV', 'CYP', 'CZE', 'DNK', 'EST', 'FIN', 'FRA', 'DEU', 'GRC', 'HUN', 'IRL', 'ITA', 'LVA', 'LTU', 'LUX', 'MLT', 'NLD', 'POL', 'PRT', 'ROU', 'SVK', 'SVN', 'ESP', 'SWE')
vidEUR <- data.frame(country = EUR,
Region = rep(1, 27))
NorA <- c('AIA', 'ATG',	'ABW', 'BHS',	'BRB', 'BLZ',	'BMU', 'BES', 'VGB', 'CAN', 'CYM', 'CRI', 'CUB', 'CUW', 'DMA', 'DOM', 'SLV', 'GRL', 'GRD', 'GLP', 'GTM', 'HTI', 'HND', 'JAM', 'MTQ', 'MEX', 'SPM', 'MSR', 'ANT', 'KNA', 'NIC', 'PAN', 'PRI', 'BES', 'BES', 'SXM', 'KNA', 'LCA', 'SPM', 'VCT',	'TTO', 'TCA', 'USA', 'VIR')
vidNorA <- data.frame(country = NorA,
Region = rep(1, 44))
JP <- c('JPN')
vidJP <- data.frame(country = JP,
Region = c(1))
OTHER <- c('AFG',	'ALA',	'ALB',	'DZA',	'ASM',	'AND',	'AGO',	'AIA',	'ATA',	'ATG',	'ARG',	'ARM',	'ABW',	'AUS',	'AUT',	'AZE',	'BHS',	'BHR',	'BGD',	'BRB',	'BLR',	'BEL',	'BLZ',	'BEN',	'BMU',	'BTN',	'BOL',	'BES',	'BIH',	'BWA',	'BVT',	'BRA',	'IOT',	'BRN',	'BGR',	'BFA',	'BDI',	'KHM',	'CMR',	'CAN',	'CPV',	'CYM',	'CAF',	'TCD',	'CHL',	'CHN',	'CXR',	'CCK',	'COL',	'COM',	'COG',	'COD',	'COK',	'CRI',	'CIV',	'HRV',	'CUB',	'CUW',	'CYP',	'CZE',	'DNK',	'DJI',	'DMA',	'DOM',	'ECU',	'EGY',	'SLV',	'GNQ',	'ERI',	'EST',	'ETH',	'FLK',	'FRO',	'FJI',	'FIN',	'FRA',	'GUF',	'PYF',	'ATF',	'GAB',	'GMB',	'GEO',	'DEU',	'GHA',	'GIB',	'GRC',	'GRL',	'GRD',	'GLP',	'GUM',	'GTM',	'GGY',	'GIN',	'GNB',	'GUY',	'HTI',	'HMD',	'VAT',	'HND',	'HKG',	'HUN',	'ISL',	'IND',	'IDN',	'IRN',	'IRQ',	'IRL',	'IMN',	'ISR',	'ITA',	'JAM',	'JPN',	'JEY',	'JOR',	'KAZ',	'KEN',	'KIR',	'PRK',	'KOR',	'XKX',	'KWT',	'KGZ',	'LAO',	'LVA',	'LBN',	'LSO',	'LBR',	'LBY',	'LIE',	'LTU',	'LUX',	'MAC',	'MKD',	'MDG',	'MWI',	'MYS',	'MDV',	'MLI',	'MLT',	'MHL',	'MTQ',	'MRT',	'MUS',	'MYT',	'MEX',	'FSM',	'MDA',	'MCO',	'MNG',	'MNE',	'MSR',	'MAR',	'MOZ',	'MMR',	'NAM',	'NRU',	'NPL',	'NLD',	'NCL',	'NZL',	'NIC',	'NER',	'NGA',	'NIU',	'NFK',	'MNP',	'NOR',	'OMN',	'PAK',	'PLW',	'PSE',	'PAN',	'PNG',	'PRY',	'PER',	'PHL',	'PCN',	'POL',	'PRT',	'PRI',	'QAT',	'SRB',	'REU',	'ROU',	'RUS',	'RWA',	'BLM',	'SHN',	'KNA',	'LCA',	'MAF',	'SPM',	'VCT',	'WSM',	'SMR',	'STP',	'SAU',	'SEN',	'SYC',	'SLE',	'SGP',	'SXM',	'SVK',	'SVN',	'SLB',	'SOM',	'ZAF',	'SGS',	'SSD',	'ESP',	'LKA',	'SDN',	'SUR',	'SJM',	'SWZ',	'SWE',	'CHE',	'SYR',	'TWN',	'TJK',	'TZA',	'THA',	'TLS',	'TGO',	'TKL',	'TON',	'TTO',	'TUN',	'TUR',	'XTX',	'TKM',	'TCA',	'TUV',	'UGA',	'UKR',	'ARE',	'GBR',	'USA',	'UMI',	'URY',	'UZB',	'VUT',	'VEN',	'VNM',	'VGB',	'VIR',	'WLF',	'ESH',	'YEM',	'ZMB',	'ZWE')
OTHER <- OTHER[!(OTHER %in% c(EUR, NorA, JP))]
vidOTHER <- data.frame(country = OTHER,
Region = rep(1, 184))
vidGLOBAL <- data.frame(country = c(OTHER, NorA, JP, EUR),
Region = rep(1, 256))
# List of all publishers arranged in desc number of works
all_publishers <- vgsales %>%
group_by(Publisher) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
append('All Publishers', 0)
region_name <- function(region) {
if (region == 'Global_Sales')
return('Global')
if (region == 'NA_Sales')
return('North America')
if (region == 'EU_Sales')
return('Europe')
if (region == 'JP_Sales')
return('Japan')
if (region == 'Other_Sales')
return('Other Countries')
}
something <- vgsales %>%
to_be_platform(group = 'All Platforms') %>%
mutate(Name = case_when(
Name == 'Wii Sports' ~ 'Wii Sports',
Name != 'Wii Sports' ~ 'Average'
)) %>%
group_by(Name) %>%
summarise(NA_Sales = mean(NA_Sales),
EU_Sales = mean(EU_Sales),
JP_Sales = mean(JP_Sales),
Global_Sales = mean(Global_Sales),
Other_Sales = mean(Other_Sales)) %>%
slice(match(c('Wii Sports', 'Average'), Name))
something <- something %>%
pivot_longer(cols = c('NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales'),
names_to = c('Type'),
values_to = c('Sales'))
something$Name <- factor(something$Name, levels = c('Wii Sports', 'Average'))
ggplot(something, aes(Type, Sales, fill = Name)) +
geom_col(position = 'dodge')
runApp('Jung_Nathan_final_project.R')
runApp('Jung_Nathan_final_project.R')
library(ggmap)
install.packages("ggmap")
library(ggmap)
map('world')
map('world', fill = TRUE)
runApp('Jung_Nathan_final_project.R')
install.packages("patchwork")
# Loading in libraries
library(shiny)
library(shinydashboard)
library(ggplot2)
library(tidyverse)
library(DT)
library(knitr)
library(kableExtra)
library(rlang)
library(patchwork)
library(sf)
# Loading in data
vgsales <- read.csv('data/vgsales.csv')
# Creating function to add a colors column to the data
coloring <- function(platform) {
if (platform %in% list("Wii", 'NES', 'GB', 'DS', 'SNES', 'GBA', '3DS', 'N64', 'GC', 'WiiU'))
{return('red')}
if (platform %in% list('X360', 'XB', 'XOne'))
{return('limegreen')}
if (platform %in% list('PS3', 'PS2', 'PS4', 'PS', 'PSP', 'PSV'))
{return('darkblue')}
if (platform %in% list('2600', 'GEN', 'GG', 'SCD', 'DC'))
{return('#0D98BA')}
else
{return('#71797E')}
}
vgsales$coloring <- apply(vgsales[c('Platform')], 1, FUN = coloring)
# Function to get "coloring" based off of a title
get_color <- function(title) {
row = vgsales %>%
filter(Name == title)
color = unique(row$coloring)
return(color[[1]])
}
# Getting list of all unique video game titles
vg_names <- unique(vgsales$Name)
# Defining function to filter based on platform
to_be_platform <- function(df, group) {
if (group != 'All Platforms')
filter(df, Platform == group)
else
df
}
# Defining function to filter based on year
to_be_year <- function(df, group) {
if (group == 'All Years')
df
else
filter(df, Year == group)
}
# Defining function to filter based on publisher
to_be_publisher <- function(df, group) {
if (group == 'All Publishers')
df
else
filter(df, Publisher == group)
}
# Defining function to filter based on genre
to_be_genre <- function(df, group) {
if (group == 'All Genres')
df
else
filter(df, Genre == group)
}
# Defining function to filter based on outliers
to_be_outliers <- function(df, outlier) {
if (outlier == 'Yes')
filter(df, Global_Sales <= 1.5*(quantile(Global_Sales, .75) - quantile(Global_Sales, .25)) + quantile(Global_Sales, .75))
else
df
}
to_be_outliers(vgsales, 'Yes')
something <- to_be_outliers(vgsales, 'Yes')
# Defining function to choose list of platforms based on input
platforms <- function(name) {
platform = filter(vgsales, Name == name)
unique(platform$Platform) %>%
append('All Platforms', 0)
}
# Defining function to choose a year based on input
years <- function(name) {
year = filter(vgsales, Name == name)
unique(year$Year) %>%
append('All Years', 0)
}
# Defining function to choose Publisher based on input
publishers <- function(name) {
publisher = filter(vgsales, Name == name)
unique(publisher$Publisher) %>%
append('All Publishers', 0)
}
# Defining function to choose genre based on input
genres <- function(name) {
genre = filter(vgsales, Name == name)
unique(genre$Genre) %>%
append('All Genres', 0)
}
# Creating list of all types of sales in vgsales
regions <- colnames(vgsales)[7:11]
# Creating list and df of ISO3 country names in EU, NA, JP, Other and Global
EUR <- c('AUT', 'BEL', 'BGR', 'HRV', 'CYP', 'CZE', 'DNK', 'EST', 'FIN', 'FRA', 'DEU', 'GRC', 'HUN', 'IRL', 'ITA', 'LVA', 'LTU', 'LUX', 'MLT', 'NLD', 'POL', 'PRT', 'ROU', 'SVK', 'SVN', 'ESP', 'SWE')
vidEUR <- data.frame(country = EUR,
Region = rep(1, 27))
NorA <- c('AIA', 'ATG',	'ABW', 'BHS',	'BRB', 'BLZ',	'BMU', 'BES', 'VGB', 'CAN', 'CYM', 'CRI', 'CUB', 'CUW', 'DMA', 'DOM', 'SLV', 'GRL', 'GRD', 'GLP', 'GTM', 'HTI', 'HND', 'JAM', 'MTQ', 'MEX', 'SPM', 'MSR', 'ANT', 'KNA', 'NIC', 'PAN', 'PRI', 'BES', 'BES', 'SXM', 'KNA', 'LCA', 'SPM', 'VCT',	'TTO', 'TCA', 'USA', 'VIR')
vidNorA <- data.frame(country = NorA,
Region = rep(1, 44))
JP <- c('JPN')
vidJP <- data.frame(country = JP,
Region = c(1))
OTHER <- c('AFG',	'ALA',	'ALB',	'DZA',	'ASM',	'AND',	'AGO',	'AIA',	'ATA',	'ATG',	'ARG',	'ARM',	'ABW',	'AUS',	'AUT',	'AZE',	'BHS',	'BHR',	'BGD',	'BRB',	'BLR',	'BEL',	'BLZ',	'BEN',	'BMU',	'BTN',	'BOL',	'BES',	'BIH',	'BWA',	'BVT',	'BRA',	'IOT',	'BRN',	'BGR',	'BFA',	'BDI',	'KHM',	'CMR',	'CAN',	'CPV',	'CYM',	'CAF',	'TCD',	'CHL',	'CHN',	'CXR',	'CCK',	'COL',	'COM',	'COG',	'COD',	'COK',	'CRI',	'CIV',	'HRV',	'CUB',	'CUW',	'CYP',	'CZE',	'DNK',	'DJI',	'DMA',	'DOM',	'ECU',	'EGY',	'SLV',	'GNQ',	'ERI',	'EST',	'ETH',	'FLK',	'FRO',	'FJI',	'FIN',	'FRA',	'GUF',	'PYF',	'ATF',	'GAB',	'GMB',	'GEO',	'DEU',	'GHA',	'GIB',	'GRC',	'GRL',	'GRD',	'GLP',	'GUM',	'GTM',	'GGY',	'GIN',	'GNB',	'GUY',	'HTI',	'HMD',	'VAT',	'HND',	'HKG',	'HUN',	'ISL',	'IND',	'IDN',	'IRN',	'IRQ',	'IRL',	'IMN',	'ISR',	'ITA',	'JAM',	'JPN',	'JEY',	'JOR',	'KAZ',	'KEN',	'KIR',	'PRK',	'KOR',	'XKX',	'KWT',	'KGZ',	'LAO',	'LVA',	'LBN',	'LSO',	'LBR',	'LBY',	'LIE',	'LTU',	'LUX',	'MAC',	'MKD',	'MDG',	'MWI',	'MYS',	'MDV',	'MLI',	'MLT',	'MHL',	'MTQ',	'MRT',	'MUS',	'MYT',	'MEX',	'FSM',	'MDA',	'MCO',	'MNG',	'MNE',	'MSR',	'MAR',	'MOZ',	'MMR',	'NAM',	'NRU',	'NPL',	'NLD',	'NCL',	'NZL',	'NIC',	'NER',	'NGA',	'NIU',	'NFK',	'MNP',	'NOR',	'OMN',	'PAK',	'PLW',	'PSE',	'PAN',	'PNG',	'PRY',	'PER',	'PHL',	'PCN',	'POL',	'PRT',	'PRI',	'QAT',	'SRB',	'REU',	'ROU',	'RUS',	'RWA',	'BLM',	'SHN',	'KNA',	'LCA',	'MAF',	'SPM',	'VCT',	'WSM',	'SMR',	'STP',	'SAU',	'SEN',	'SYC',	'SLE',	'SGP',	'SXM',	'SVK',	'SVN',	'SLB',	'SOM',	'ZAF',	'SGS',	'SSD',	'ESP',	'LKA',	'SDN',	'SUR',	'SJM',	'SWZ',	'SWE',	'CHE',	'SYR',	'TWN',	'TJK',	'TZA',	'THA',	'TLS',	'TGO',	'TKL',	'TON',	'TTO',	'TUN',	'TUR',	'XTX',	'TKM',	'TCA',	'TUV',	'UGA',	'UKR',	'ARE',	'GBR',	'USA',	'UMI',	'URY',	'UZB',	'VUT',	'VEN',	'VNM',	'VGB',	'VIR',	'WLF',	'ESH',	'YEM',	'ZMB',	'ZWE')
OTHER <- OTHER[!(OTHER %in% c(EUR, NorA, JP))]
vidOTHER <- data.frame(country = OTHER,
Region = rep(1, 184))
vidGLOBAL <- data.frame(country = c(OTHER, NorA, JP, EUR),
Region = rep(1, 256))
# List of all publishers arranged in desc number of works
all_publishers <- vgsales %>%
group_by(Publisher) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
append('All Publishers', 0)
region_name <- function(region) {
if (region == 'Global_Sales')
return('Global')
if (region == 'NA_Sales')
return('North America')
if (region == 'EU_Sales')
return('Europe')
if (region == 'JP_Sales')
return('Japan')
if (region == 'Other_Sales')
return('Other Countries')
}
something <- vgsales %>%
to_be_platform(group = 'All Platforms') %>%
mutate(Name = case_when(
Name == 'Wii Sports' ~ 'Wii Sports',
Name != 'Wii Sports' ~ 'Average'
)) %>%
group_by(Name) %>%
summarise(NA_Sales = mean(NA_Sales),
EU_Sales = mean(EU_Sales),
JP_Sales = mean(JP_Sales),
Global_Sales = mean(Global_Sales),
Other_Sales = mean(Other_Sales)) %>%
slice(match(c('Wii Sports', 'Average'), Name))
something <- something %>%
pivot_longer(cols = c('NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales'),
names_to = c('Type'),
values_to = c('Sales'))
something$Name <- factor(something$Name, levels = c('Wii Sports', 'Average'))
ggplot(something, aes(Type, Sales, fill = Name)) +
geom_col(position = 'dodge')
runApp('Jung_Nathan_final_project.R')
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
library(rnaturalearth)
library(rnaturalearthdata)
# Loading in data
vgsales <- read.csv('data/vgsales.csv')
world <- ne_countries(scale = 'medium', returnclass = 'sf')
runApp('Jung_Nathan_final_project.R')
View(world)
vidEUR <- data.frame(adm0_a3 = EUR,
Region = rep(1, 27))
NorA <- c('AIA', 'ATG',	'ABW', 'BHS',	'BRB', 'BLZ',	'BMU', 'BES', 'VGB', 'CAN', 'CYM', 'CRI', 'CUB', 'CUW', 'DMA', 'DOM', 'SLV', 'GRL', 'GRD', 'GLP', 'GTM', 'HTI', 'HND', 'JAM', 'MTQ', 'MEX', 'SPM', 'MSR', 'ANT', 'KNA', 'NIC', 'PAN', 'PRI', 'BES', 'BES', 'SXM', 'KNA', 'LCA', 'SPM', 'VCT',	'TTO', 'TCA', 'USA', 'VIR')
vidNorA <- data.frame(adm0_a3 = NorA,
Region = rep(1, 44))
JP <- c('JPN')
vidJP <- data.frame(adm0_a3 = JP,
Region = c(1))
OTHER <- c('AFG',	'ALA',	'ALB',	'DZA',	'ASM',	'AND',	'AGO',	'AIA',	'ATA',	'ATG',	'ARG',	'ARM',	'ABW',	'AUS',	'AUT',	'AZE',	'BHS',	'BHR',	'BGD',	'BRB',	'BLR',	'BEL',	'BLZ',	'BEN',	'BMU',	'BTN',	'BOL',	'BES',	'BIH',	'BWA',	'BVT',	'BRA',	'IOT',	'BRN',	'BGR',	'BFA',	'BDI',	'KHM',	'CMR',	'CAN',	'CPV',	'CYM',	'CAF',	'TCD',	'CHL',	'CHN',	'CXR',	'CCK',	'COL',	'COM',	'COG',	'COD',	'COK',	'CRI',	'CIV',	'HRV',	'CUB',	'CUW',	'CYP',	'CZE',	'DNK',	'DJI',	'DMA',	'DOM',	'ECU',	'EGY',	'SLV',	'GNQ',	'ERI',	'EST',	'ETH',	'FLK',	'FRO',	'FJI',	'FIN',	'FRA',	'GUF',	'PYF',	'ATF',	'GAB',	'GMB',	'GEO',	'DEU',	'GHA',	'GIB',	'GRC',	'GRL',	'GRD',	'GLP',	'GUM',	'GTM',	'GGY',	'GIN',	'GNB',	'GUY',	'HTI',	'HMD',	'VAT',	'HND',	'HKG',	'HUN',	'ISL',	'IND',	'IDN',	'IRN',	'IRQ',	'IRL',	'IMN',	'ISR',	'ITA',	'JAM',	'JPN',	'JEY',	'JOR',	'KAZ',	'KEN',	'KIR',	'PRK',	'KOR',	'XKX',	'KWT',	'KGZ',	'LAO',	'LVA',	'LBN',	'LSO',	'LBR',	'LBY',	'LIE',	'LTU',	'LUX',	'MAC',	'MKD',	'MDG',	'MWI',	'MYS',	'MDV',	'MLI',	'MLT',	'MHL',	'MTQ',	'MRT',	'MUS',	'MYT',	'MEX',	'FSM',	'MDA',	'MCO',	'MNG',	'MNE',	'MSR',	'MAR',	'MOZ',	'MMR',	'NAM',	'NRU',	'NPL',	'NLD',	'NCL',	'NZL',	'NIC',	'NER',	'NGA',	'NIU',	'NFK',	'MNP',	'NOR',	'OMN',	'PAK',	'PLW',	'PSE',	'PAN',	'PNG',	'PRY',	'PER',	'PHL',	'PCN',	'POL',	'PRT',	'PRI',	'QAT',	'SRB',	'REU',	'ROU',	'RUS',	'RWA',	'BLM',	'SHN',	'KNA',	'LCA',	'MAF',	'SPM',	'VCT',	'WSM',	'SMR',	'STP',	'SAU',	'SEN',	'SYC',	'SLE',	'SGP',	'SXM',	'SVK',	'SVN',	'SLB',	'SOM',	'ZAF',	'SGS',	'SSD',	'ESP',	'LKA',	'SDN',	'SUR',	'SJM',	'SWZ',	'SWE',	'CHE',	'SYR',	'TWN',	'TJK',	'TZA',	'THA',	'TLS',	'TGO',	'TKL',	'TON',	'TTO',	'TUN',	'TUR',	'XTX',	'TKM',	'TCA',	'TUV',	'UGA',	'UKR',	'ARE',	'GBR',	'USA',	'UMI',	'URY',	'UZB',	'VUT',	'VEN',	'VNM',	'VGB',	'VIR',	'WLF',	'ESH',	'YEM',	'ZMB',	'ZWE')
OTHER <- OTHER[!(OTHER %in% c(EUR, NorA, JP))]
vidOTHER <- data.frame(adm0_a3 = OTHER,
Region = rep(1, 184))
vidGLOBAL <- data.frame(adm0_a3 = c(OTHER, NorA, JP, EUR),
Region = rep(1, 256))
View(vidGLOBAL)
merge(world, vidGLOBAL, by = 'adm0_a3', all.x = TRUE)
something = merge(world, vidGLOBAL, by = 'adm0_a3', all.x = TRUE)
View(something)
something = left_join(world, vidGLOBAL, by = 'adm0_a3', all.x = TRUE)
something = left_join(world, vidGLOBAL, by = 'adm0_a3')
something = left_join(world, vidGLOBAL, by = 'adm0_a3', multiple = all)
something = left_join(world, vidGLOBAL, by = 'adm0_a3', multiple = 'all')
View(something)
vidGLOBAL <- data.frame(adm0_a3 = c(OTHER, NorA, JP, EUR),
my_region = rep(1, 256))
something = left_join(world, vidGLOBAL, by = 'adm0_a3', multiple = 'all')
colnames(something)
runApp('Jung_Nathan_final_project.R')
--------------------------------------
# FUNCTIONS LIST
# Creating function to add a colors column to the data
coloring <- function(platform) {
if (platform %in% list("Wii", 'NES', 'GB', 'DS', 'SNES', 'GBA', '3DS', 'N64', 'GC', 'WiiU'))
{return('red')}
if (platform %in% list('X360', 'XB', 'XOne'))
{return('limegreen')}
if (platform %in% list('PS3', 'PS2', 'PS4', 'PS', 'PSP', 'PSV'))
{return('darkblue')}
if (platform %in% list('2600', 'GEN', 'GG', 'SCD', 'DC'))
{return('#0D98BA')}
else
{return('#71797E')}
}
library(shiny); runApp('Jung_Nathan_final_project.R')
runApp('Jung_Nathan_final_project.R')
runApp('Jung_Nathan_final_project.R')
runApp('Jung_Nathan_final_project.R')
library(shiny); runApp('Jung_Nathan_final_project.R')
runApp('Jung_Nathan_final_project.R')
library(shiny); runApp('Jung_Nathan_final_project.R')
shiny::runApp()
